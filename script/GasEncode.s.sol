// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import {Script, console2} from "forge-std/Script.sol";
import {Punycode} from "../src/Punycode.sol";

contract GasEncode is Script {

	function run() public view {
		ascii();
		poops();
		mixed();
	}
	
	function ascii() internal view {
		dump(1, unicode"");
		dump(1, unicode"a");
		dump(2, unicode"aa");
		dump(3, unicode"aaa");
		dump(4, unicode"aaaa");
		dump(5, unicode"aaaaa");
		dump(6, unicode"aaaaaa");
		dump(7, unicode"aaaaaaa");
		dump(8, unicode"aaaaaaaa");
		dump(9, unicode"aaaaaaaaa");
		dump(10, unicode"aaaaaaaaaa");
		dump(11, unicode"aaaaaaaaaaa");
		dump(12, unicode"aaaaaaaaaaaa");
		dump(13, unicode"aaaaaaaaaaaaa");
		dump(14, unicode"aaaaaaaaaaaaaa");
		dump(15, unicode"aaaaaaaaaaaaaaa");
		dump(16, unicode"aaaaaaaaaaaaaaaa");
		dump(17, unicode"aaaaaaaaaaaaaaaaa");
		dump(18, unicode"aaaaaaaaaaaaaaaaaa");
		dump(19, unicode"aaaaaaaaaaaaaaaaaaa");
		dump(20, unicode"aaaaaaaaaaaaaaaaaaaa");
		dump(21, unicode"aaaaaaaaaaaaaaaaaaaaa");
		dump(22, unicode"aaaaaaaaaaaaaaaaaaaaaa");
		dump(23, unicode"aaaaaaaaaaaaaaaaaaaaaaa");
		dump(24, unicode"aaaaaaaaaaaaaaaaaaaaaaaa");
		dump(25, unicode"aaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(26, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(27, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(28, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(29, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(30, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(31, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(32, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(33, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(34, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(35, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(36, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(37, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(38, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(39, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(40, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(41, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(42, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(43, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(44, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(45, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(46, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(47, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(48, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(49, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(50, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(51, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(52, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(53, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(54, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(55, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(56, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(57, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(58, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(59, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(60, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(61, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(62, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		dump(63, unicode"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
	}

	function mixed() internal view {
		dump(10, unicode"🇺🇸brazzers");
		dump(10, unicode"1⃣6⃣8⃣6⃣1⃣");
		dump(10, unicode"📜otherdeed");
		dump(12, unicode"#⃣0⃣0⃣0⃣0⃣1⃣");
		dump(10, unicode"ξmetaverse");
		dump(14, unicode"microsoft365🇺🇸");
		dump(16, unicode"5⃣0⃣0⃣0⃣0⃣0⃣0⃣0⃣");
		dump(10, unicode"0⃣2⃣1⃣1⃣0⃣");
		dump(13, unicode"🦋🦋butterfly🦋🦋");
		dump(12, unicode"🇩🇴🇱🇨🇪🇬🇦🇧🇧🇦🇳🇦");
		dump(10, unicode"🇺🇸passport");
		dump(11, unicode"00h00−23h59");
		dump(10, unicode"6⃣9⃣0⃣0⃣1⃣");
		dump(10, unicode"lantmännen");
		dump(14, unicode"💎diamondhands🤲");
		dump(14, unicode"châteaumargaux");
		dump(10, unicode"2⃣2⃣2⃣5⃣5⃣");
		dump(10, unicode"3⃣3⃣3⃣2⃣4⃣");
		dump(11, unicode"➖2⃣0⃣0⃣0⃣0⃣");
		dump(10, unicode"0⃣7⃣1⃣6⃣1⃣");
		dump(12, unicode"👩🏼‍🦯👩🏼‍🦯👩🏼‍🦯");
		dump(10, unicode"i❤vacation");
		dump(10, unicode"0⃣6⃣7⃣4⃣7⃣");
		dump(10, unicode"0⃣5⃣7⃣8⃣8⃣");
		dump(11, unicode"gamergirl’s");
		dump(11, unicode"apprentice®");
		dump(14, unicode"thursdaynight🏈");
		dump(12, unicode"🧚🏽‍♂🧚🏽‍♂🧚🏽‍♂");
		dump(13, unicode"michaelmüller");
		dump(10, unicode"thecrater☮");
		dump(15, unicode"🚶‍♂🚶‍♂🚶‍♂🚶‍♂🚶‍♂");
		dump(10, unicode"0⃣0⃣0⃣7⃣6⃣");
		dump(14, unicode"0x👨‍⚕👨‍⚕👨‍⚕👨‍⚕");
		dump(16, unicode"6⃣6⃣6⃣6⃣9⃣9⃣9⃣9⃣");
		dump(10, unicode"barcelona🧡");
		dump(23, unicode"starrynightovertherhône");
		dump(11, unicode"cristiano🇵🇹");
		dump(11, unicode"6⃣-9⃣-6⃣-9⃣");
		dump(15, unicode"🧝‍♂🧝‍♂🧝‍♂🧝‍♂🧝‍♂");
		dump(16, unicode"🙆🏼‍♂🙆🏼‍♂🙆🏼‍♂🙆🏼‍♂");
		dump(12, unicode"🐉🐉🐉🐉🐉🐉🐉🐉🐉🐉🐉🐉");
		dump(12, unicode"hipervínculo");
		dump(10, unicode"$1️⃣1️⃣1️⃣");
		dump(18, unicode"selecciónargentina");
		dump(10, unicode"❤samarkand");
		dump(12, unicode"rolls-royce🧡");
		dump(10, unicode"1⃣4⃣2⃣0⃣1⃣");
		dump(15, unicode"🏃‍♀🏃‍♀🏃‍♀🏃‍♀🏃‍♀");
		dump(10, unicode"0⃣7⃣5⃣9⃣9⃣");
		dump(10, unicode"0⃣6⃣9⃣8⃣2⃣");
		dump(17, unicode"🦋butterfly💋kisses");
		dump(13, unicode"ángelaaguilar");
		dump(25, unicode"plz-stop-wash-trading🙏❤49");
		dump(12, unicode"💈barbershop💈");
		dump(12, unicode"whale🐳wallet");
		dump(12, unicode"sciencecamp®");
		dump(10, unicode"metallica🤘");
		dump(10, unicode"0⃣9⃣0⃣0⃣9⃣");
		dump(11, unicode"clubguaraní");
		dump(15, unicode"🚵🏼‍♂️🚵🏼‍♂️🚵🏼‍♂️");
		dump(10, unicode"6⃣6⃣0⃣1⃣1⃣");
		dump(10, unicode"shibarium💎");
		dump(13, unicode"servicedog🐕‍🦺");
		dump(14, unicode"1⃣8⃣8⃣8⃣8⃣8⃣1⃣");
		dump(12, unicode"😪😪😪😪😪😪😪😪😪😪😪😪");
		dump(10, unicode"✊🏻✊🏼✊🏽✊🏾✊🏿");
		dump(12, unicode"ဗ္ဗ္ဗ္ဗ္ဗ္ဗံ");
		dump(12, unicode"cryprtobatz🦇");
		dump(10, unicode"1⃣9⃣6⃣0⃣4⃣");
		dump(10, unicode"magician’s");
		dump(16, unicode"ronaldinhogaúcho");
		dump(11, unicode"ファイナルファンタジー");
		dump(11, unicode"👈👈🏻👈🏼👈🏽👈🏾👈🏿");
		dump(10, unicode"checks🟦🟩🟥⬜");
		dump(12, unicode"🅱everlyhills");
		dump(12, unicode"👑kingrichard");
		dump(13, unicode"rogerfederer🎾");
		dump(10, unicode"worm🪱store");
		dump(12, unicode"0⃣0⃣5⃣5⃣5⃣5⃣");
		dump(10, unicode"2⃣2⃣2⃣8⃣5⃣");
		dump(15, unicode"我王大陆梭哈800w买入科太币");
		dump(10, unicode"缓缓飘落的枫叶像思念");
		dump(10, unicode"🇨🇳passport");
		dump(10, unicode"6♥6♠6♦9♠9♥");
		dump(12, unicode"0⃣0⃣0⃣0⃣5⃣4⃣");
		dump(11, unicode"schrödinger");
		dump(10, unicode"🫤🫤🫤🫤🫤🫤🫤🫤🫤🫤");
		dump(11, unicode"2117-mars🇦🇪");
		dump(11, unicode"heartbroke💔");
		dump(10, unicode"🙇🙇🙇🙇🙇🙇🙇🙇🙇🙇");
		dump(11, unicode"🏳‍🌈pride🏳‍🌈");
		dump(15, unicode"compañiadejesus");
		dump(16, unicode"🧑🏾‍✈🧑🏾‍✈🧑🏾‍✈🧑🏾‍✈");
		dump(16, unicode"🧗🏻‍♀🧗🏻‍♀🧗🏻‍♀🧗🏻‍♀");
		dump(10, unicode"8⃣8⃣7⃣7⃣8⃣");
		dump(16, unicode"📰fableoftwitter🔎");
		dump(14, unicode"lucashernández");
		dump(12, unicode"🇻🇦azizpetrus");
		dump(16, unicode"🔴🔴🔴scam-alert🔴🔴🔴");
		dump(12, unicode"👨🏻‍⚕👨🏻‍⚕👨🏻‍⚕");
	}

	function poops() internal view {
		dump(1, unicode"💩");
		dump(2, unicode"💩💩");
		dump(3, unicode"💩💩💩");
		dump(4, unicode"💩💩💩💩");
		dump(5, unicode"💩💩💩💩💩");
		dump(6, unicode"💩💩💩💩💩💩");
		dump(7, unicode"💩💩💩💩💩💩💩");
		dump(8, unicode"💩💩💩💩💩💩💩💩");
		dump(9, unicode"💩💩💩💩💩💩💩💩💩");
		dump(10, unicode"💩💩💩💩💩💩💩💩💩💩");
		dump(11, unicode"💩💩💩💩💩💩💩💩💩💩💩");
		dump(12, unicode"💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(13, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(14, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(15, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(16, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(17, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(18, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(19, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(20, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(21, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(22, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(23, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(24, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(25, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(26, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(27, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(28, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(29, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(30, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(31, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(32, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(33, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(34, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(35, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(36, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(37, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(38, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(39, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(40, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(41, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(42, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(43, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(44, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(45, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(46, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(47, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(48, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(49, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(50, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(51, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(52, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(53, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(54, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(55, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
		dump(56, unicode"💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩💩");
	}

	function dump(uint256 n, string memory s) internal view {
		uint256 g = gasleft();
		uint256 p;
		assembly { p := add(s, 32) }
		Punycode.encode(p, bytes(s).length);
		g -= gasleft();
		console2.log(n, g / n, g);
	}

}